openapi: 3.0.0
servers:
  - url: 'http://52.15.91.107:3002/api/v1'
info:
  description: >-
    除注册与登陆两个API外，其他API的访问均需要在request header加上JWT token，否则返回`401 Unauthorized`。

    登陆成功后Server会返回JWT token。

    JWT token的格式为：
      - Value `Authorization: Bearer <token>` from request header

    **注意Bearer和token之前有一个空格**


    当使用swagger-ui访问API时，需要点右下方绿色`Authorize`按钮，输入`Bearer <token>`
    
    
    - 铸币账户：新建的token全部在这个账户里
    
    - gas账户：交易产生的所有gas都存到这个账户里
    
    - ram账户：所有ram都从这个账户里支出
    
    
    
    Sample Dapp code: https://github.com/XDMu/SampleDapp
    
    

    # change log __v0.0.2__
    
    本次版本主要更新如下：
    
    - Earth部署成功后需要初始化，初始化之前需要创建两个Earth账户，作为GZH的铸币账户和gas账户
    
    - 只有Admin才能创建token，创建token时需要指定3个账户  
    
    - 交易有gas和ram
    
    - admin可以改ram
    
    - 铸币账户可以改gas
    
    - Dapp部署之后需要到Earth注册一个合约账户
    
    - Dapp可以通过Earth的API接口进行转账操作

  version: 0.0.2
  title: Dapp API 文档
tags:
  - name: Token
    description: 代币相关API
  - name: Account
    description: 用户相关API
  - name: Admin
    description: Account Admin相关API
  - name: Auth
    description: User Auth相关API
  - name: Bureau
    description: 未来局相关API

paths:
  # Token
  /token/transfer:
    post:
      summary: 转账
      tags:
        - Token
      description: 代币的转账
      security:
        - Bearer: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferTokenRequest'
        description: 当前用户给目标转账一定数量的某种代币
        required: true
  /token/updateGas/{tokenSymbol}:
    post:
      tags:
        - Token
      summary: 更新某个Token的Gas
      description: 只有某个Token的owner才可以改Gas
      security:
        - Bearer: []
      parameters:
        - name: tokenSymbol
          in: path
          description: 'The symbol of the token'
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                gasMin:
                  description: 'the minimum gas cost for a transaction'
                  type: number
                  format: doulbe
                  minimum: 0.0
                gasPercentage:
                  description: 'The percentage of gas cost for a transaction'
                  type: number
                  format: float
                  minimum: 0.0
                  maximum: 100.0
      responses:
        '200':
          description: Success
        '401':
          description: UnAuthorized
        '405':
          description: Validation exception
  # /token/updateRam/{tokenSymbol}:
  #   post:
  #     tags:
  #       - Token
  #     summary: 更新某个Token的Ram
  #     security:
  #       - Bearer: []
  #     description: 只有Earth的管理员才可以改某个token的Ram
  #     parameters:
  #       - name: tokenSymbol
  #         in: path
  #         description: 'The symbol of the token'
  #         required: true
  #         schema:
  #           type: string
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               ramMin:
  #                 description: 'the minimum ram cost for a transaction'
  #                 type: number
  #                 format: doulbe
  #                 minimum: 0.0
  #               ramPercentage:
  #                 description: 'The percentage of ram cost for a transaction'
  #                 type: number
  #                 format: float
  #                 minimum: 0.0
  #                 maximum: 100.0
  #     responses:
  #       '200':
  #         description: Success
  #       '401':
  #         description: UnAuthorized
  #       '405':
  #         description: Validation exception
  /token/info/{tokenSymbol}:
    get:
      tags:
        - Token
      summary: 获取某个token的信息
      description: 获取某个token的信息
      security: 
        - Bearer: []
      parameters: 
        - name: tokenSymbol
          in: path
          description: 'The symbol of the token'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '401':
          description: UnAuthorized
        '405':
          description: Validation exception
  /token/create:
    post:
      tags:
        - Token
      summary: create token
      description: |
        create new token 只有Earth区块链的管理员用户可以创建新的Token, 创建新代币时需要指定代币的owner
      security: 
        - Bearer: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Token'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '401':
          description: UnAuthorized
        '400':
          description: Validation exception
        '500':
          description: Error
  /token/getGas:
    post:
      tags:
        - Token
      summary: 查询某个交易需要的gas
      description: 查询某个交易需要的gas
      responses:
        '200':
          description: 成功
      security:
        - Bearer: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - symbol
                - amount
              properties:
                symbol:
                  type: string
                amount:
                  type: number
  #Bureau
  /bureau/init:
    post:
      tags:
        - Bureau
      summary: 初始化智能合约账户
      description: 使用未来局需要初始化合约账户
      security:
        - Bearer: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitContractAccountResponse'
        '401':
          description: UnAuthorized
        '400':
          description: Validation exception
        '500':
          description: Error
  /bureau/create:
    post:
      tags:
        - Bureau
      summary: 在区块链中创建未来局
      description: >-
        区块链的管理员用户可以授权给某个区块链用户**创建未来局**的权限（通过PUT
        /user/{username}），只有具备**创建未来局**权限的用户才能调用此API创建新的Token。
      operationId: addBureau
      security:
        - Bearer: []
      responses:
        '201':
          description: Success
        '401':
          description: UnAuthorized
        '405':
          description: Validation exception
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BureauBasic'
        description: Bureau object that needs to be added to the blockchain network
        required: true
  /bureau/query:
    post:
      summary: 查询未来局
      tags:
        - Bureau
      description: 查询未来局
      security:
        - Bearer: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bureau'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryBureauRequest'
        description: 当前用户查询未来局
        required: true
  /bureau/getAll:
    get:
      summary: 获取所有未来局的名称
      tags:
        - Bureau
      description: 获取所有未来局的名称
      security:
        - Bearer: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllBureauResponse'
  /bureau/betTransfer:
    post:
      tags:
        - Bureau
      summary: 未来局下注
      description: ''
      operationId: betBureau
      security:
        - Bearer: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BetBureauResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BetBureauRequest'
        required: true
  /bureau/settle:
    post:
      tags:
        - Bureau
      summary: 未来局结果判定
      description: 未来局结果判定
      security:
        - Bearer: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JudgeBureauResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JudgeBureauRequest'
        required: true
  /bureau/queryOption:
    post:
      tags:
        - Bureau
      summary: 查询某个用户某个未来局各个选项下注
      description: 查询某个用户某个未来局各个选项下注
      responses:
        '200':
          description: 成功
      security:
        - Bearer: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - futureBureauName
              properties:
                username:
                  type: string
                futureBureauName:
                  type: string
  /bureau/queryParticipate:
    post:
      tags:
        - Bureau
      summary: 查询某个用户参与的未来局
      description: 查询某个用户某个未来局各个选项下注
      responses:
        '200':
          description: 成功
      security:
        - Bearer: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - username
              properties:
                username:
                  type: string
  /bureau/test:
    post:
      tags:
        - Bureau
      summary: 测试专用接口
      description: 测试专用接口
      responses:
        '200':
          description: 成功
      security:
        - Bearer: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - username
              properties:
                username:
                  type: string
  # 用户管理
  /account:
    post:
      tags:
        - Account
      summary: 创建用户
      description: 创建用户
      operationId: createUser
      responses:
        '201':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterUserResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequest'
        description: Create User
        required: true
  /account/{accountName}:
    get:
      tags:
        - Account
      summary: 根据账户Id查询账户信息，每个证书只能查询自己的账户
      description: ''
      security:
        - Bearer: []
      parameters:
        - name: accountName
          in: path
          description: 'The account name that needs to be fetched.'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    required:
                      - payload
                    properties:
                      payload:
                        allOf:
                          - $ref: '#/components/schemas/User'
        '400':
          description: 请求不正确
        '404':
          description: Account not found
    # MSP的用户管理
    put:
      tags:
        - Account
      summary: 更新账户密码
      description: |
        只能修改密码

      security:
        - Bearer: []
      parameters:
        - name: accountName
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 成功更新用户信息
        '400':
          description: Invalid user supplied
        '404':
          description: Account not found
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
        description: 更新密码
        required: true
  /grant/{username}/createFutureBureau:
    post:
      summary: 授予某个用户创建未来局的权限
      description: 授予某个用户创建未来局的权限，需要使用Admin Token来访问这个API
      tags:
        - Admin
      security:
        - Bearer: []
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched.'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 成功
        '400':
          description: 请求的参数不争取
        '401':
          description: 请求的token不是Admin
        '404':
          description: 用户名为{username}的用户没找到
  # Identity
  '/identity/{username}':
    get:
      tags:
        - Auth
      summary: 从MSP查询某个用户的证书
      description: >-
        和`/user/{username}`不用的地方是，这个API不涉及到对区块链的访问，它仅仅在MSP查询当前用户的证书相关信息，不会返回链上内容,
        所有人都只能查看自己的信息
      security:
        - Bearer: []
      parameters:
        - name: username
          in: path
          description: 用户的用户名
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 成功
          content:
            'application/json':
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    required:
                      - payload
                    properties:
                      payload:
                        allOf:
                          - $ref: '#/components/schemas/Identity'
        '401':
          description: 没有权限
  # Auth
  /auth/login:
    post:
      summary: 使用用户名密码登陆，返回JWT token
      description: 登陆
      tags:
        - Auth
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: 用户名或密码错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        description: 用户名密码
        required: true
  /auth/verify:
    post:
      summary: 验证token是否有效
      description: 验证某个token是否有效，如果有效，返回这个token的数据，如果无效，返回401
      tags:
        - Auth
      security:
        - Bearer: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: 用户名或密码错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
components:
  securitySchemes:
    Bearer:
      type: 'apiKey'
      name: Authorization
      in: header
  schemas:
    Token:
      type: object
      description: 'The token data schema in Earth, introduction can not be changed'
      required:
        - name
        - symbol
        - decimals
        - amount
        - mintageAccountId
        - gasAccountId
        - gasMin
        - gasPercentage
      properties:
        name:
          type: string
          description: 积分的名称
        symbol:
          type: string
          description: 积分符号
        decimals:
          description: '积分精度,即最小分割粒度'
          type: integer
          minimum: 0
          maximum: 18
        amount:
          description: 'unsigned int格式，范围为0到2^53-1，当首次发行时代表首次发行的代币数量, 其他时候代表当前用户所拥有的数量'
          type: integer
          minimum: 0
          maximum: 9007199254740991
        description:
          description: 'The description for this token'
          type: string
        mintageAccountId:
          description: |
            '铸币账户的Id，创建token后所有的token都在该账户里'
          type: string
        gasAccountId:
          description: |
            'gas账户的Id, 每次交易收取的gas都在这个账户里面'
          type: string
        ramAccountId:
          description: |
            'ram账户的Id, 每次交易上交的ram从这个账户扣除'
          type: string
        gasMin:
          description: 'the minimum gas cost for a transaction'
          type: number
          format: doulbe
          minimum: 0.0
        gasPercentage:
          description: 'The percentage of gas cost for a transaction'
          type: number
          format: float
          minimum: 0.0
          maximum: 100.0
        ramMin:
          description: 'the minimum ram cost of a transaction'
          type: number
          format: doulbe
          minimum: 0.0
        ramPercentage:
          description: 'The percentage of ram cost for a transaction'
          type: number
          format: float
          minimum: 0.0
          maximum: 100.0
    TransferTokenRequest:
      type: object
      properties:
        token:
          type: string
          description: 代币的名字，转账的时候需要注明是转的哪种代币
        target:
          type: string
          description: 目标用户的ID
        amount:
          type: number
          description: 转账数额
        metadata:
          type: string
          description: 交易备注
        password:
          type: string
          format: password
          description: 输入密码以验证本次交易
    TransferResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          required:
            - payload
          properties:
            payload:
              type: object
              required:
                - txId
                - balance
              properties:
                txId:
                  type: string
                  description: 这次交易的Id，未来会支持根据这个Id查询交易内容，当前版本不支持
                balance:
                  type: number
                  description: 余额
    UserBaseInfo:
      type: object
      required:
        - username
        - role
      properties:
        username:
          type: string
        role:
          type: string
          description: >-
            用户类型，当前版本只有两种，admin和user，admin表示管理员，在系统初始化的时候会创建一个初始化管理员。只有管理员才能把一个普通用户的身份修改为管理员
          enum:
            - admin
            - user
            - contract
          default: user
    RegisterUserRequest:
      allOf:
        - $ref: '#/components/schemas/UserBaseInfo'
        - type: object
          required:
            - password
          properties:
            password:
              type: string
              description: 密码，目前版本对密码格式不做校验
    RegisterUserResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          required:
            - payload
          properties:
            payload:
              allOf:
                - $ref: '#/components/schemas/User'
    User:
      description: 账户的data schema
      allOf:
        - $ref: '#/components/schemas/UserBaseInfo'
        - type: object
          required:
            - id
            - canCreateNewToken
            - canCreateNewFutureBureau
            - wallet
            - bureaus
          properties:
            id:
              type: string
            canCreateNewToken:
              type: boolean
              default: false
              description: 这个字段表示该用户是否具备**创建新代币**的权限
            canCreateNewFutureBureau:
              type: boolean
              default: false
              description: 这个字段表示该用户是否具备**创建未来局**的权限
            wallet:
              $ref: '#/components/schemas/Wallet'
            bureaus:
              $ref: '#/components/schemas/Bureaus'
    Wallet:
      description: 用户的钱包，包含多种类型的代币
      type: object
      properties:
        tokens:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Token'
              - type: object
                properties:
                  history:
                    type: array
                    items:
                      $ref: '#/components/schemas/History'
    History:
      description: token的交易历史
      type: object
      properties:
        from:
          type: string
        to:
          type: string
        amount:
          type: number
          description: 转账金额
        balance:
          type: number
          description: 余额
        description:
          type: string
          description: 交易备注
    Identity:
      allOf:
        - $ref: '#/components/schemas/UserBaseInfo'
        - type: object
          required:
            - id
            - privateKey
            - certificate
            - rootCertificate
            - mspId
          properties:
            id:
              type: string
              description: 'uuid, 在注册的时候由membership service provider生成，和x509证书的commonName绑定'
            privateKey:
              type: string
              description: 用户的私钥
            certificate:
              type: string
              description: 用户的证书，用户使用这个证书访问区块链
            rootCertificate:
              type: string
              description: ca的根证书
            mspId:
              type: string
              description: membership service provider的Id，mspId唯一确定了这个user的证书是谁颁发的
    ApiResponse:
      type: object
      required:
        - success
      properties:
        success:
          type: boolean
        message:
          type: string
          description: ''
        payload:
          type: object
    LoginRequest:
      type: object
      properties:
        username:
          type: string
          description: 用户名
        password:
          type: string
          description: 密码，目前版本密码格式不加validation
    LoginResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          required:
            - payload
          properties:
            payload:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  description: 登陆成功返回的JWT token
    BureauBasic:
      type: object
      properties:
        name:
          type: string
          description: 未来局的英文名称
        chineseName:
          type: string
          description: 未来局的中文名称
        content:
          type: string
          description: 未来局的内容
        endTime:
          type: string
          description: 未来局结束时间
        option1:
          type: string
          description: 未来局选项一
        option2:
          type: string
          description: 未来局选项二
        option3:
          type: string
          description: 未来局选项三
        option4:
          type: string
          description: 未来局选项四
        option5:
          type: string
          description: 未来局选项五
        judgePerson:
          type: string
          description: 未来局裁定人
    Bureau:
      description: 未来局的data schema
      allOf: 
        - $ref: '#/components/schemas/BureauBasic'
        - type: object
          properties:
            creator:
              type: string
              description: 未来局创建者
            createTime:
              type: string
              description: 未来局创建时间
            history:
              type: array
              items:
                $ref: '#/components/schemas/BureauHistory'
    BureauHistory:
      description: 用户竞猜记录
      type: object
      properties:
        from:
          type: string
        to:
          type: string
        token:
          type: string
          description: 下注用的代币
        chooseOption:
          type: string
          description: 选择的选项
        amount:
          type: number
          description: 下注的数量
    Bureaus:
      description: 用户参与的未来局
      type: object
      properties:
        bureaus:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Bureau'
              - type: object
                properties:
                  history:
                    type: array
                    items:
                      $ref: '#/components/schemas/BureauHistory'
    QueryBureauRequest:
      type: object
      properties:
        futureBureauName:
          type: string
          description: 未来局名称
    BetBureauRequest:
      type: object
      properties:
        futureBureauName:
          type: string
          description: 未来局的名称
        chooseOption:
          type: string
          description: 未来局选项
        amount:
          type: number
          description: 下注数量
        password:
          type: string
          format: password
          description: 输入密码以验证本次交易
    BetBureauResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
    InitContractAccountResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
    JudgeBureauRequest:
      type: object
      properties:
        futureBureauName:
          type: string
          description: 未来局的名称
        result:
          type: string
          description: 未来局的结果
    JudgeBureauResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
    AllBureauResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            payload:
              properties:
                bureaus:
                  type: array
                  items:
                    $ref: '#/components/schemas/MinusBureauInfo'
    MinusBureauInfo:
      type: object
      properties:
        name: 
          type: string
          description: 未来局名称
        creator:
          type: string
          description: 未来局创建者
        judgePerson:
          type: string
          description: 未来局结果判定人
        endTime:
          type: string
          description: 未来局结束时间
